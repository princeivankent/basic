{"remainingRequest":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\wamp64\\www\\basic\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\wamp64\\www\\basic\\frontend\\src\\store\\login.module.js","dependencies":[{"path":"C:\\wamp64\\www\\basic\\frontend\\src\\store\\login.module.js","mtime":1556595142502},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\wamp64\\\\www\\\\basic\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\nimport { UserService } from '../services/user.service';\nimport { TokenService } from '../services/storage.service';\nimport router from '../router';\nvar login = {\n  namespaced: true,\n  state: {\n    authenticating: false,\n    refreshTokenPromise: null,\n    // Holds the promise of the refresh token\n    isSessionExpires: false,\n    authenticationErrorCode: 0,\n    authenticationError: '',\n    accessToken: TokenService.getToken(),\n    user: TokenService.getUserInstance()\n  },\n  getters: {\n    loggedIn: function loggedIn(state) {\n      return state.accessToken ? true : false;\n    },\n    authenticationErrorCode: function authenticationErrorCode(state) {\n      return state.authenticationErrorCode;\n    },\n    authenticationError: function authenticationError(state) {\n      return state.authenticationError;\n    },\n    authenticating: function authenticating(state) {\n      return state.authenticating;\n    }\n  },\n  mutations: {\n    loginRequest: function loginRequest(state) {\n      state.authenticating = true;\n      state.authenticationError = '';\n      state.authenticationErrorCode = 0;\n    },\n    loginSuccess: function loginSuccess(state, response) {\n      state.accessToken = response.access_token;\n      state.user = response.user;\n      state.authenticating = false;\n    },\n    loginError: function loginError(state, _ref) {\n      var errorCode = _ref.errorCode,\n          errorMessage = _ref.errorMessage;\n      state.authenticating = false;\n      state.authenticationErrorCode = errorCode;\n      state.authenticationError = errorMessage;\n    },\n    cancelAuthentication: function cancelAuthentication(state) {\n      state.authenticating = false;\n    },\n    logoutSuccess: function logoutSuccess(state) {\n      state.accessToken = '';\n    },\n    refreshTokenPromise: function refreshTokenPromise(state, promise) {\n      state.refreshTokenPromise = promise;\n    },\n    refreshAccessToken: function refreshAccessToken(state, response) {\n      state.accessToken = response.access_token;\n      state.authenticating = false;\n    },\n    // Error hooks\n    unAuthorized: function unAuthorized(state, res) {\n      state.authenticationErrorCode = res.status;\n      state.authenticationError = res.message;\n    }\n  },\n  actions: {\n    login: function () {\n      var _login = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref2, payload) {\n        var commit, response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref2.commit;\n                commit('loginRequest');\n                _context.prev = 2;\n                _context.next = 5;\n                return UserService.login(payload.email, payload.password);\n\n              case 5:\n                response = _context.sent;\n                commit('loginSuccess', response); // Redirect the user to the page he first tried to visit or to the home view\n\n                router.push(router.history.current.query.redirect || '/');\n                return _context.abrupt(\"return\", true);\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](2);\n                commit('cancelAuthentication'); // if (e instanceof AuthenticationError) {\n                //   commit('loginError', {errorCode: e.errorCode, errorMessage: e.message})\n                // }\n\n                return _context.abrupt(\"return\", false);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 11]]);\n      }));\n\n      function login(_x, _x2) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }(),\n    logout: function logout(_ref3) {\n      var commit = _ref3.commit;\n      UserService.logout();\n      commit('logoutSuccess');\n      router.push('/login');\n    },\n    refreshToken: function refreshToken(_ref4) {\n      var commit = _ref4.commit,\n          state = _ref4.state;\n\n      // If this is the first time the refreshToken has been called, make a request\n      // otherwise return the same promise to the caller\n      if (!state.refreshTokenPromise) {\n        var p = UserService.refreshToken();\n        commit('refreshTokenPromise', p); // Wait for the UserService.refreshToken() to resolve. On success set the token and clear promise\n        // Clear the promise on error as well.\n\n        p.then(function (response) {\n          commit('refreshTokenPromise', null);\n          commit('refreshAccessToken', response);\n        }, function () {\n          commit('refreshTokenPromise', null);\n        });\n      }\n\n      return state.refreshTokenPromise;\n    },\n    unAuthorized: function unAuthorized(_ref5, message) {\n      var commit = _ref5.commit;\n      UserService.logout();\n      commit('logoutSuccess');\n      commit('unAuthorized', message);\n      router.push('/login');\n    }\n  }\n};\nexport default login;",{"version":3,"sources":["C:\\wamp64\\www\\basic\\frontend\\src\\store\\login.module.js"],"names":["UserService","TokenService","router","login","namespaced","state","authenticating","refreshTokenPromise","isSessionExpires","authenticationErrorCode","authenticationError","accessToken","getToken","user","getUserInstance","getters","loggedIn","mutations","loginRequest","loginSuccess","response","access_token","loginError","errorCode","errorMessage","cancelAuthentication","logoutSuccess","promise","refreshAccessToken","unAuthorized","res","status","message","actions","payload","commit","email","password","push","history","current","query","redirect","logout","refreshToken","p","then"],"mappings":"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","sourcesContent":["import { UserService } from '../services/user.service'\r\nimport { TokenService } from '../services/storage.service'\r\nimport router from '../router'\r\n\r\nconst login = {\r\n  namespaced: true,\r\n  state: {\r\n    authenticating: false,\r\n    refreshTokenPromise: null,  // Holds the promise of the refresh token\r\n    isSessionExpires: false,\r\n    authenticationErrorCode: 0,\r\n    authenticationError: '',\r\n    accessToken: TokenService.getToken(),\r\n    user: TokenService.getUserInstance()\r\n  },\r\n\r\n  getters: {\r\n    loggedIn: (state) => {\r\n      return state.accessToken ? true : false\r\n    },\r\n\r\n    authenticationErrorCode: (state) => {\r\n      return state.authenticationErrorCode\r\n    },\r\n\r\n    authenticationError: (state) => {\r\n      return state.authenticationError\r\n    },\r\n\r\n    authenticating: (state) => {\r\n      return state.authenticating\r\n    }\r\n  },\r\n\r\n  mutations: {\r\n    loginRequest (state) {\r\n      state.authenticating = true;\r\n      state.authenticationError = ''\r\n      state.authenticationErrorCode = 0\r\n    },\r\n\r\n    loginSuccess (state, response) {\r\n      state.accessToken = response.access_token\r\n      state.user = response.user\r\n      state.authenticating = false\r\n    },\r\n\r\n    loginError (state, {errorCode, errorMessage}) {\r\n      state.authenticating = false\r\n      state.authenticationErrorCode = errorCode\r\n      state.authenticationError = errorMessage\r\n    },\r\n\r\n    cancelAuthentication (state) {\r\n      state.authenticating = false\r\n    },\r\n\r\n    logoutSuccess (state) {\r\n      state.accessToken = ''\r\n    },\r\n\r\n    refreshTokenPromise (state, promise) {\r\n      state.refreshTokenPromise = promise\r\n    },\r\n\r\n    refreshAccessToken (state, response) {\r\n      state.accessToken = response.access_token\r\n      state.authenticating = false\r\n    },\r\n\r\n    // Error hooks\r\n    unAuthorized (state, res) {\r\n      state.authenticationErrorCode = res.status\r\n      state.authenticationError = res.message\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    async login({ commit }, payload) {\r\n      commit('loginRequest');\r\n\r\n      try {\r\n        const response = await UserService.login(payload.email, payload.password);\r\n        commit('loginSuccess', response)\r\n\r\n        // Redirect the user to the page he first tried to visit or to the home view\r\n        router.push(router.history.current.query.redirect || '/');\r\n\r\n        return true\r\n      } \r\n      catch (e) {\r\n        commit('cancelAuthentication')\r\n\r\n        // if (e instanceof AuthenticationError) {\r\n        //   commit('loginError', {errorCode: e.errorCode, errorMessage: e.message})\r\n        // }\r\n\r\n        return false\r\n      }\r\n    },\r\n\r\n    logout({ commit }) {\r\n      UserService.logout()\r\n      commit('logoutSuccess')\r\n      router.push('/login')\r\n    },\r\n\r\n    refreshToken({ commit, state }) {\r\n      // If this is the first time the refreshToken has been called, make a request\r\n      // otherwise return the same promise to the caller\r\n\r\n      if(!state.refreshTokenPromise) {\r\n        const p = UserService.refreshToken()\r\n        commit('refreshTokenPromise', p)\r\n\r\n        // Wait for the UserService.refreshToken() to resolve. On success set the token and clear promise\r\n        // Clear the promise on error as well.\r\n        p.then(\r\n          response => {\r\n            commit('refreshTokenPromise', null)\r\n            commit('refreshAccessToken', response)\r\n          },\r\n          () => {\r\n            commit('refreshTokenPromise', null)\r\n          }\r\n        )\r\n      }\r\n\r\n      return state.refreshTokenPromise\r\n    },\r\n\r\n    unAuthorized ({ commit }, message) {\r\n      UserService.logout()\r\n      commit('logoutSuccess')\r\n      commit('unAuthorized', message)\r\n      router.push('/login')\r\n    }\r\n  }\r\n}\r\n\r\nexport default login\r\n"]}]}