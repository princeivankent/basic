{"remainingRequest":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\wamp64\\www\\basic\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\wamp64\\www\\basic\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\wamp64\\www\\basic\\frontend\\src\\services\\user.service.js","dependencies":[{"path":"C:\\wamp64\\www\\basic\\frontend\\src\\services\\user.service.js","mtime":1554130969000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\wamp64\\\\www\\\\basic\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"C:\\\\wamp64\\\\www\\\\basic\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\wamp64\\\\www\\\\basic\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\wamp64\\\\www\\\\basic\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\wamp64\\\\www\\\\basic\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"C:\\\\wamp64\\\\www\\\\basic\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/wrapNativeSuper\";\nimport ApiService from './api.service';\nimport { TokenService } from './storage.service';\n\nvar AuthenticationError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(AuthenticationError, _Error);\n\n  function AuthenticationError(errorCode, message) {\n    var _this;\n\n    _classCallCheck(this, AuthenticationError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthenticationError).call(this, message));\n    _this.name = _this.constructor.name;\n    _this.errorCode = errorCode;\n    _this.message = message;\n    return _this;\n  }\n\n  return AuthenticationError;\n}(_wrapNativeSuper(Error));\n\nvar RegistrationError =\n/*#__PURE__*/\nfunction (_Error2) {\n  _inherits(RegistrationError, _Error2);\n\n  function RegistrationError(errorCode, message) {\n    var _this2;\n\n    _classCallCheck(this, RegistrationError);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(RegistrationError).call(this, message));\n    _this2.name = _this2.constructor.name;\n    _this2.errorCode = errorCode;\n    _this2.message = message;\n    return _this2;\n  }\n\n  return RegistrationError;\n}(_wrapNativeSuper(Error));\n\nvar UserService = {\n  /**\r\n    * Login the user and store the access token to TokenService. \r\n    * \r\n    * @returns access_token\r\n    * @throws AuthenticationError \r\n  **/\n  login: function () {\n    var _login = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(email, password) {\n      var requestData, response;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              requestData = {\n                method: 'POST',\n                url: \"/api/login\",\n                data: {\n                  grant_type: 'password',\n                  client_id: process.env.VUE_CLIENT_ID,\n                  client_secret: process.env.VUE_CLIENT_SECRET,\n                  email: email,\n                  password: password\n                }\n              };\n              _context.prev = 1;\n              _context.next = 4;\n              return ApiService.customRequest(requestData);\n\n            case 4:\n              response = _context.sent;\n              TokenService.saveUserInstance(response.data.user);\n              TokenService.saveRefreshToken(response.data.refresh_token);\n              TokenService.saveToken(response.data.access_token);\n              ApiService.setHeader(); // NOTE: We haven't covered this yet in our ApiService \n              //       but don't worry about this just yet - I'll come back to it later\n              // ApiService.mount401Interceptor();\n\n              return _context.abrupt(\"return\", response.data);\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              throw new AuthenticationError(_context.t0.response.status, _context.t0.response.data.message);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    function login(_x, _x2) {\n      return _login.apply(this, arguments);\n    }\n\n    return login;\n  }(),\n\n  /**\r\n    * Register the user \r\n    * \r\n    * @returns status\r\n    * @throws RegistrationError \r\n  **/\n  register: function () {\n    var _register = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee2(name, email, password) {\n      var requestData, response;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              requestData = {\n                method: 'POST',\n                url: \"/api/register\",\n                data: {\n                  name: name,\n                  email: email,\n                  password: password\n                }\n              };\n              _context2.prev = 1;\n              _context2.next = 4;\n              return ApiService.customRequest(requestData);\n\n            case 4:\n              response = _context2.sent;\n              return _context2.abrupt(\"return\", response.data);\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              throw new RegistrationError(_context2.t0.response.status, _context2.t0.response.data.message);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }));\n\n    function register(_x3, _x4, _x5) {\n      return _register.apply(this, arguments);\n    }\n\n    return register;\n  }(),\n\n  /**\r\n    * Refresh the access token.\r\n  **/\n  refreshToken: function () {\n    var _refreshToken = _asyncToGenerator(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee3() {\n      var refreshToken, requestData, response;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Gets refresh token from LocalStorage\n              refreshToken = TokenService.getRefreshToken();\n              requestData = {\n                method: 'POST',\n                url: \"/oauth/token\",\n                data: {\n                  grant_type: 'refresh_token',\n                  refresh_token: refreshToken,\n                  client_id: 2,\n                  client_secret: '7GBP7A007eKAW3vLO7knh2FpGveBFS28fxXKktRo'\n                }\n              };\n              _context3.prev = 2;\n              _context3.next = 5;\n              return ApiService.customRequest(requestData);\n\n            case 5:\n              response = _context3.sent;\n              TokenService.saveToken(response.data.access_token);\n              TokenService.saveRefreshToken(response.data.refresh_token); // Update the header in ApiService\n\n              ApiService.setHeader();\n              return _context3.abrupt(\"return\", response.data.access_token);\n\n            case 12:\n              _context3.prev = 12;\n              _context3.t0 = _context3[\"catch\"](2);\n              throw new AuthenticationError(_context3.t0.response.status, _context3.t0.response.data.detail);\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 12]]);\n    }));\n\n    function refreshToken() {\n      return _refreshToken.apply(this, arguments);\n    }\n\n    return refreshToken;\n  }(),\n\n  /**\r\n   * Logout the current user by removing the token from storage. \r\n   * \r\n   * Will also remove `Authorization Bearer <token>` header from future requests.\r\n  **/\n  logout: function logout() {\n    // Remove the token and remove Authorization header from Api Service as well \n    TokenService.removeToken();\n    TokenService.removeRefreshToken();\n    TokenService.removeUserInstance();\n    ApiService.removeHeader(); // NOTE: Again, we'll cover the 401 Interceptor a bit later. \n    // ApiService.unmount401Interceptor()\n  }\n};\nexport default UserService;\nexport { UserService, AuthenticationError, RegistrationError };",{"version":3,"sources":["C:\\wamp64\\www\\basic\\frontend\\src\\services\\user.service.js"],"names":["ApiService","TokenService","AuthenticationError","errorCode","message","name","constructor","Error","RegistrationError","UserService","login","email","password","requestData","method","url","data","grant_type","client_id","process","env","VUE_CLIENT_ID","client_secret","VUE_CLIENT_SECRET","customRequest","response","saveUserInstance","user","saveRefreshToken","refresh_token","saveToken","access_token","setHeader","status","register","refreshToken","getRefreshToken","detail","logout","removeToken","removeRefreshToken","removeUserInstance","removeHeader"],"mappings":"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","sourcesContent":["import ApiService from './api.service'\r\nimport { TokenService } from './storage.service'\r\n\r\nclass AuthenticationError extends Error {\r\n  constructor(errorCode, message) {\r\n    super(message)\r\n    this.name = this.constructor.name\r\n    this.errorCode = errorCode\r\n    this.message = message\r\n  }\r\n}\r\n\r\nclass RegistrationError extends Error {\r\n  constructor(errorCode, message) {\r\n    super(message)\r\n    this.name = this.constructor.name\r\n    this.errorCode = errorCode\r\n    this.message = message\r\n  }\r\n}\r\n\r\nconst UserService = {\r\n  /**\r\n    * Login the user and store the access token to TokenService. \r\n    * \r\n    * @returns access_token\r\n    * @throws AuthenticationError \r\n  **/\r\n  login: async function(email, password) {\r\n    const requestData = {\r\n      method: 'POST',\r\n      url: \"/api/login\",\r\n      data: {\r\n        grant_type   : 'password',\r\n        client_id    : process.env.VUE_CLIENT_ID,\r\n        client_secret: process.env.VUE_CLIENT_SECRET,\r\n        email        : email,\r\n        password     : password\r\n      }\r\n    }\r\n\r\n    try {\r\n      const response = await ApiService.customRequest(requestData)\r\n\r\n      TokenService.saveUserInstance(response.data.user)\r\n      TokenService.saveRefreshToken(response.data.refresh_token)\r\n      TokenService.saveToken(response.data.access_token)\r\n      ApiService.setHeader()\r\n      \r\n      // NOTE: We haven't covered this yet in our ApiService \r\n      //       but don't worry about this just yet - I'll come back to it later\r\n      // ApiService.mount401Interceptor();\r\n\r\n      return response.data\r\n    } \r\n    catch (error) {\r\n      throw new AuthenticationError(error.response.status, error.response.data.message)\r\n    }\r\n  },\r\n\r\n  /**\r\n    * Register the user \r\n    * \r\n    * @returns status\r\n    * @throws RegistrationError \r\n  **/\r\n  register: async (name, email, password) => {\r\n    const requestData = {\r\n      method: 'POST',\r\n      url: \"/api/register\",\r\n      data: {\r\n        name: name,\r\n        email: email,\r\n        password: password\r\n      }\r\n    }\r\n    \r\n    try {\r\n      const response = await ApiService.customRequest(requestData)\r\n\r\n      return response.data\r\n    } \r\n    catch (error) {\r\n      throw new RegistrationError(error.response.status, error.response.data.message)\r\n    }\r\n  },\r\n\r\n  /**\r\n    * Refresh the access token.\r\n  **/\r\n  refreshToken: async function() {\r\n\r\n    // Gets refresh token from LocalStorage\r\n    const refreshToken = TokenService.getRefreshToken()\r\n\r\n    const requestData = {\r\n      method: 'POST',\r\n      url: \"/oauth/token\",\r\n      data: {\r\n        grant_type   : 'refresh_token',\r\n        refresh_token: refreshToken,\r\n        client_id    : 2,\r\n        client_secret: '7GBP7A007eKAW3vLO7knh2FpGveBFS28fxXKktRo',\r\n      }\r\n    }\r\n\r\n    try {\r\n      const response = await ApiService.customRequest(requestData)\r\n\r\n      TokenService.saveToken(response.data.access_token)\r\n      TokenService.saveRefreshToken(response.data.refresh_token)\r\n\r\n      // Update the header in ApiService\r\n      ApiService.setHeader()\r\n\r\n      return response.data.access_token\r\n    } \r\n    catch (error) {\r\n      throw new AuthenticationError(error.response.status, error.response.data.detail)\r\n    }\r\n\r\n  },\r\n\r\n    /**\r\n     * Logout the current user by removing the token from storage. \r\n     * \r\n     * Will also remove `Authorization Bearer <token>` header from future requests.\r\n    **/\r\n    logout() {\r\n      // Remove the token and remove Authorization header from Api Service as well \r\n      TokenService.removeToken()\r\n      TokenService.removeRefreshToken()\r\n      TokenService.removeUserInstance()\r\n      ApiService.removeHeader()\r\n      \r\n      // NOTE: Again, we'll cover the 401 Interceptor a bit later. \r\n      // ApiService.unmount401Interceptor()\r\n    }\r\n}\r\n\r\nexport default UserService\r\n\r\nexport { UserService, AuthenticationError, RegistrationError }\r\n"]}]}