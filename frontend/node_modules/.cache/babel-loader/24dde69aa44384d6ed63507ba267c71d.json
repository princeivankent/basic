{"remainingRequest":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\wamp64\\www\\basic\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\wamp64\\www\\basic\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\wamp64\\www\\basic\\frontend\\src\\store\\register.module.js","dependencies":[{"path":"C:\\wamp64\\www\\basic\\frontend\\src\\store\\register.module.js","mtime":1553245311000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:\\\\wamp64\\\\www\\\\basic\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { UserService, RegistrationError } from '../services/user.service';\nvar register = {\n  namespaced: true,\n  state: {\n    isRegistered: false,\n    registrationErrorCode: 0,\n    registrationError: '',\n    registration: false\n  },\n  mutations: {\n    registrationRequest: function registrationRequest(state) {\n      state.registration = true;\n      state.registrationErrorCode = 0;\n      state.registrationError = '';\n    },\n    registrationSuccess: function registrationSuccess(state) {\n      state.registration = false;\n      state.isRegistered = true;\n    },\n    registrationError: function registrationError(state, _ref) {\n      var errorCode = _ref.errorCode,\n          errorMessage = _ref.errorMessage;\n      state.registration = false;\n      state.registrationErrorCode = errorCode;\n      state.registrationError = errorMessage;\n    }\n  },\n  actions: {\n    register: function () {\n      var _register = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(_ref2, payload) {\n        var commit;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                commit = _ref2.commit;\n                _context.prev = 1;\n                _context.next = 4;\n                return UserService.register(payload.name, payload.email, payload.password);\n\n              case 4:\n                commit('registrationSuccess');\n                return _context.abrupt(\"return\", true);\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](1);\n                if (_context.t0 instanceof RegistrationError) commit('registrationError', {\n                  errorCode: _context.t0.errorCode,\n                  errorMessage: _context.t0.message\n                });\n                return _context.abrupt(\"return\", false);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 8]]);\n      }));\n\n      function register(_x, _x2) {\n        return _register.apply(this, arguments);\n      }\n\n      return register;\n    }()\n  }\n};\nexport default register;",{"version":3,"sources":["C:\\wamp64\\www\\basic\\frontend\\src\\store\\register.module.js"],"names":["UserService","RegistrationError","register","namespaced","state","isRegistered","registrationErrorCode","registrationError","registration","mutations","registrationRequest","registrationSuccess","errorCode","errorMessage","actions","payload","commit","name","email","password","message"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,iBAAtB,QAA+C,0BAA/C;AAEA,IAAMC,QAAQ,GAAG;AACfC,EAAAA,UAAU,EAAE,IADG;AAEfC,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE,KADT;AAELC,IAAAA,qBAAqB,EAAE,CAFlB;AAGLC,IAAAA,iBAAiB,EAAE,EAHd;AAILC,IAAAA,YAAY,EAAE;AAJT,GAFQ;AASfC,EAAAA,SAAS,EAAE;AACTC,IAAAA,mBADS,+BACWN,KADX,EACkB;AACzBA,MAAAA,KAAK,CAACI,YAAN,GAAqB,IAArB;AACAJ,MAAAA,KAAK,CAACE,qBAAN,GAA8B,CAA9B;AACAF,MAAAA,KAAK,CAACG,iBAAN,GAA0B,EAA1B;AACD,KALQ;AAOTI,IAAAA,mBAPS,+BAOWP,KAPX,EAOkB;AACzBA,MAAAA,KAAK,CAACI,YAAN,GAAqB,KAArB;AACAJ,MAAAA,KAAK,CAACC,YAAN,GAAqB,IAArB;AACD,KAVQ;AAYTE,IAAAA,iBAZS,6BAYUH,KAZV,QAY4C;AAAA,UAA1BQ,SAA0B,QAA1BA,SAA0B;AAAA,UAAfC,YAAe,QAAfA,YAAe;AACnDT,MAAAA,KAAK,CAACI,YAAN,GAAqB,KAArB;AACAJ,MAAAA,KAAK,CAACE,qBAAN,GAA8BM,SAA9B;AACAR,MAAAA,KAAK,CAACG,iBAAN,GAA0BM,YAA1B;AACD;AAhBQ,GATI;AA4BfC,EAAAA,OAAO,EAAE;AACDZ,IAAAA,QADC;AAAA;AAAA;AAAA,sDACmBa,OADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,gBAAAA,MADV,SACUA,MADV;AAAA;AAAA;AAAA,uBAGGhB,WAAW,CAACE,QAAZ,CAAqBa,OAAO,CAACE,IAA7B,EAAmCF,OAAO,CAACG,KAA3C,EAAkDH,OAAO,CAACI,QAA1D,CAHH;;AAAA;AAIHH,gBAAAA,MAAM,CAAC,qBAAD,CAAN;AAJG,iDAMI,IANJ;;AAAA;AAAA;AAAA;AASH,oBAAI,uBAAaf,iBAAjB,EACEe,MAAM,CAAC,mBAAD,EAAsB;AAACJ,kBAAAA,SAAS,EAAE,YAAEA,SAAd;AAAyBC,kBAAAA,YAAY,EAAE,YAAEO;AAAzC,iBAAtB,CAAN;AAVC,iDAYI,KAZJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA5BM,CAAjB;AA8CA,eAAelB,QAAf","sourcesContent":["import { UserService, RegistrationError } from '../services/user.service'\r\n\r\nconst register = {\r\n  namespaced: true,\r\n  state: {\r\n    isRegistered: false,\r\n    registrationErrorCode: 0,\r\n    registrationError: '',\r\n    registration: false\r\n  },\r\n\r\n  mutations: {\r\n    registrationRequest(state) {\r\n      state.registration = true\r\n      state.registrationErrorCode = 0\r\n      state.registrationError = ''\r\n    },\r\n\r\n    registrationSuccess(state) {\r\n      state.registration = false\r\n      state.isRegistered = true\r\n    },\r\n\r\n    registrationError (state, {errorCode, errorMessage}) {\r\n      state.registration = false\r\n      state.registrationErrorCode = errorCode\r\n      state.registrationError = errorMessage\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    async register ({commit}, payload) {\r\n      try {\r\n        await UserService.register(payload.name, payload.email, payload.password);\r\n        commit('registrationSuccess')\r\n\r\n        return true\r\n      } \r\n      catch (e) {\r\n        if (e instanceof RegistrationError)\r\n          commit('registrationError', {errorCode: e.errorCode, errorMessage: e.message})\r\n\r\n        return false\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default register\r\n"]}]}