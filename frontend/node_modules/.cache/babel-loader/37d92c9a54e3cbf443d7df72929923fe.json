{"remainingRequest":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\wamp64\\www\\basic\\frontend\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\wamp64\\www\\basic\\frontend\\src\\services\\storage.service.js","dependencies":[{"path":"C:\\wamp64\\www\\basic\\frontend\\src\\services\\storage.service.js","mtime":1553959078000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\wamp64\\www\\basic\\frontend\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"C:\\\\wamp64\\\\www\\\\basic\\\\frontend\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nvar TOKEN_KEY = 'access_token';\nvar REFRESH_TOKEN_KEY = 'refresh_token';\nvar USER = 'user';\n/**\r\n * Manage the how Access Tokens are being stored and retreived from storage.\r\n *\r\n * Current implementation stores to localStorage. Local Storage should always be\r\n * accessed through this instace.\r\n**/\n\nvar TokenService = {\n  getToken: function getToken() {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n  saveToken: function saveToken(accessToken) {\n    localStorage.setItem(TOKEN_KEY, accessToken);\n  },\n  removeToken: function removeToken() {\n    localStorage.removeItem(TOKEN_KEY);\n  },\n  getRefreshToken: function getRefreshToken() {\n    return localStorage.getItem(REFRESH_TOKEN_KEY);\n  },\n  saveRefreshToken: function saveRefreshToken(refreshToken) {\n    localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n  },\n  removeRefreshToken: function removeRefreshToken() {\n    localStorage.removeItem(REFRESH_TOKEN_KEY);\n  },\n  getUserInstance: function getUserInstance() {\n    return JSON.parse(localStorage.getItem(USER));\n  },\n  saveUserInstance: function saveUserInstance(user) {\n    localStorage.setItem(USER, _JSON$stringify(user));\n  },\n  removeUserInstance: function removeUserInstance() {\n    localStorage.removeItem(USER);\n  }\n};\nexport { TokenService };",{"version":3,"sources":["C:\\wamp64\\www\\basic\\frontend\\src\\services\\storage.service.js"],"names":["TOKEN_KEY","REFRESH_TOKEN_KEY","USER","TokenService","getToken","localStorage","getItem","saveToken","accessToken","setItem","removeToken","removeItem","getRefreshToken","saveRefreshToken","refreshToken","removeRefreshToken","getUserInstance","JSON","parse","saveUserInstance","user","removeUserInstance"],"mappings":";AAAA,IAAMA,SAAS,GAAG,cAAlB;AACA,IAAMC,iBAAiB,GAAG,eAA1B;AACA,IAAMC,IAAI,GAAG,MAAb;AAEA;;;;;;;AAMA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,QADmB,sBACP;AACV,WAAOC,YAAY,CAACC,OAAb,CAAqBN,SAArB,CAAP;AACD,GAHkB;AAKnBO,EAAAA,SALmB,qBAKRC,WALQ,EAKK;AACtBH,IAAAA,YAAY,CAACI,OAAb,CAAqBT,SAArB,EAAgCQ,WAAhC;AACD,GAPkB;AASnBE,EAAAA,WATmB,yBASJ;AACbL,IAAAA,YAAY,CAACM,UAAb,CAAwBX,SAAxB;AACD,GAXkB;AAanBY,EAAAA,eAbmB,6BAaA;AACjB,WAAOP,YAAY,CAACC,OAAb,CAAqBL,iBAArB,CAAP;AACD,GAfkB;AAiBnBY,EAAAA,gBAjBmB,4BAiBDC,YAjBC,EAiBa;AAC9BT,IAAAA,YAAY,CAACI,OAAb,CAAqBR,iBAArB,EAAwCa,YAAxC;AACD,GAnBkB;AAqBnBC,EAAAA,kBArBmB,gCAqBG;AACpBV,IAAAA,YAAY,CAACM,UAAb,CAAwBV,iBAAxB;AACD,GAvBkB;AAyBnBe,EAAAA,eAzBmB,6BAyBA;AACjB,WAAOC,IAAI,CAACC,KAAL,CAAWb,YAAY,CAACC,OAAb,CAAqBJ,IAArB,CAAX,CAAP;AACD,GA3BkB;AA6BnBiB,EAAAA,gBA7BmB,4BA6BDC,IA7BC,EA6BK;AACtBf,IAAAA,YAAY,CAACI,OAAb,CAAqBP,IAArB,EAA2B,gBAAekB,IAAf,CAA3B;AACD,GA/BkB;AAiCnBC,EAAAA,kBAjCmB,gCAiCG;AACpBhB,IAAAA,YAAY,CAACM,UAAb,CAAwBT,IAAxB;AACD;AAnCkB,CAArB;AAsCA,SAASC,YAAT","sourcesContent":["const TOKEN_KEY = 'access_token'\r\nconst REFRESH_TOKEN_KEY = 'refresh_token'\r\nconst USER = 'user'\r\n\r\n/**\r\n * Manage the how Access Tokens are being stored and retreived from storage.\r\n *\r\n * Current implementation stores to localStorage. Local Storage should always be\r\n * accessed through this instace.\r\n**/\r\nconst TokenService = {\r\n  getToken () {\r\n    return localStorage.getItem(TOKEN_KEY)\r\n  },\r\n\r\n  saveToken (accessToken) {\r\n    localStorage.setItem(TOKEN_KEY, accessToken)\r\n  },\r\n\r\n  removeToken () {\r\n    localStorage.removeItem(TOKEN_KEY)\r\n  },\r\n\r\n  getRefreshToken () {\r\n    return localStorage.getItem(REFRESH_TOKEN_KEY)\r\n  },\r\n\r\n  saveRefreshToken (refreshToken) {\r\n    localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken)\r\n  },\r\n\r\n  removeRefreshToken () {\r\n    localStorage.removeItem(REFRESH_TOKEN_KEY)\r\n  },\r\n\r\n  getUserInstance () {\r\n    return JSON.parse(localStorage.getItem(USER))\r\n  },\r\n\r\n  saveUserInstance (user) {\r\n    localStorage.setItem(USER, JSON.stringify(user))\r\n  },\r\n\r\n  removeUserInstance () {\r\n    localStorage.removeItem(USER)\r\n  }\r\n}\r\n\r\nexport { TokenService }\r\n"]}]}